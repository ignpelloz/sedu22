La definicion de mutual exclusion (mutex) es: programa que previene el acceso simultaneo a un recurso. 

En el caso de un semaforo binario, este no debe "darse" en las tareas, solo "tomarse". Una tarea o interrupcion se encarga de liberar el semaforo continuamente mientras otras tareas lo toman continuamente.

En las transparencias de teoria se trata el semaforo binario (xSemaphoreCreateBinary) y no el mutex

En el ejemplo de semaforo binario (https://www.freertos.org/a00121.html) se crea un semaforo dentro de una tarea, esto es algo que yo podria hacer

Ver este ejemplo (https://github.com/feilipu/Arduino_FreeRTOS_Library/blob/master/examples/StructArray/StructArray.ino): si no hay semaforos, las tareas se ejecutan segun su prioridad: AnalogRead -> PrintSerial -> Blink

Ver aqui un ejemplo de cola usando struc (en lugar de string como hice yo): https://github.com/feilipu/Arduino_FreeRTOS_Library/blob/master/examples/StructQueue/StructQueue.ino

Un mutex standard solo se puede tomar una vez, por tanto llamadas anidadas fallarian (https://www.freertos.org/FreeRTOS_Support_Forum_Archive/December_2015/freertos_Behaviour_of_nested_calls_to_xSemaphoreTake_with_mutex_in_same_task_c06e6786j.html)

Cuando dos o mas tareas intentan tomar un semaforo binario, la tarea de mayor prioridad lo consigue (https://www.freertos.org/FreeRTOS_Support_Forum_Archive/March_2016/freertos_What_happens_if_semaphore_is_given_before_it_is_taken_e3c5856aj.html)

Una tarea de baja prioridad se ejecutara solo cuando no existan tareas de mayor prioridad en el estado ready (https://microcontrollerslab.com/freertos-scheduler-learn-to-configure-scheduling-algorithm/)

Puede ser que deba incrementar el stack size de la(s) tareas: https://www.freertos.org/FreeRTOS_Support_Forum_Archive/May_2012/freertos_Semaphore_Problem_5310446.html

IMPORTANTE: la tarea con prioridad 0 es la tarea idle, que se ejecuta por defecto... probareso con mi tarea de recepcion por el puerto serie (https://lectures.tik.ee.ethz.ch/es/slides/5_OperatingSystem.pdf)
